local DIRECTION_LEFT = -1
local DIRECTION_RIGHT = 1
local SPEED = 150
local GRAVITY = 1000
local JUMP = 600
local DASH_COOLDOWN = 0.8 -- seconds

function init(self)
	msg.post(".", "acquire_input_focus")
	self.dir = vmath.vector3(0, 0, 0)
	print('awefawe'..self.dir)
	self.current_anim = nil 

	self.on_ground = false
	self.last_dash = 0
end

function move(direction)
end

function dash(self)
	local now = socket.gettime()
	local p = go.get_position()
	pprint(self.last_dash)
	if now > (self.last_dash + DASH_COOLDOWN) then
		go.set_position(p + self.dir * 200)
		self.last_dash = now
	end

	self.dashCD = true
	print('dashing')
end

function jump()
end

function attack()
end

function flip()
end

function animate()
end

function update(self, dt)
	if vmath.length_sqr(self.dir) > 1 then
		self.dir = vmath.normalize(self.dir)
	end
	local p = go.get_position()
	go.set_position(p + self.dir * SPEED * dt)

	local anim = hash("idleleft")                                  -- [1]

	if self.dir.x > 0 then                                     -- [2]
		anim = hash("right")
	elseif self.dir.x < 0 then
		anim = hash("left")
	elseif self.dir.y > 0 then
		anim = hash("jump")
	end

	if self.duck then
		anim = hash("duck")
	end

	if anim ~= self.current_anim then                          -- [3]
		sprite.play_flipbook("#sprite", anim)                  -- [4]
		self.current_anim = anim                               -- [5]
	end

	self.dir = vmath.vector3()   
end

local function clamp(v, min, max)
	if v < min then return min
	elseif v > max then return max
	else return v end
end

function fixed_update(self, dt)
	-- gravity
	if (self.on_ground == true) then
		-- self.dir.y = 0
	else 
		self.dir.y = self.dir.y - GRAVITY * dt
	end
	
	self.dir.y = clamp(self.dir.y, -2000, 2000)

	
	-- This function is called if 'Fixed Update Frequency' is enabled in the Engine section of game.project
	-- Can be coupled with fixed updates of the physics simulation if 'Use Fixed Timestep' is enabled in
	-- Physics section of game.project
	-- Add update code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function on_input(self, action_id, action)
	if action_id == hash("duck") and action.pressed then
		self.duck = true
	elseif action_id == hash("duck") and action.released then
		self.duck = false
	end

	if action_id == hash("jump") and action.pressed and self.on_ground then
		self.dir.y = 600
		self.on_ground = false
	elseif action_id == hash("left") then
		self.dir.x = -1
	elseif action_id == hash("right") then
		self.dir.x = 1
	end

	if action_id == hash("dash") and action.pressed then
		dash(self)
	end
end

function on_message(self, message_id, message, sender)
	pprint(message_id, message)
	if (message_id == hash("contact_point_response") and message.other_group == hash("floor")) then
		self.on_ground = true
		self.dir.y = 0
	end
end

function on_reload(self)
	-- Add reload-handling code here
	-- Learn more: https://defold.com/manuals/hot-reload/
	-- Remove this function if not needed
end

function final(self)
	-- Add finalization code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end