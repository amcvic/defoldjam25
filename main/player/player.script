local DIRECTION_LEFT = -1
local DIRECTION_RIGHT = 1
local SPEED = 150
local GRAVITY = 1500
local JUMP = 600
local DASH_MULTIPLIER = 1
local DASH_DURATION = .15 -- seconds
local DASH_COOLDOWN = 0.8 -- seconds
local ATTACK_COOLDOWN = 0.55 -- seconds

function init(self)
	msg.post(".", "acquire_input_focus")
	
	self.velocity = vmath.vector3(0, 0, 0)
	self.current_anim = nil 
	self.on_ground = false
	self.dashing = false
	self.last_dash = 0
	self.last_attack = 0
end

local function flip(direction)
	sprite.set_hflip("#sprite", direction < 0)
end

local function move(self)
	self.velocity.x = SPEED * DASH_MULTIPLIER * self.direction

end

local function dash(self)
	local now = socket.gettime()
	
	if now > (self.last_dash + DASH_COOLDOWN) then
		sound.play("#attack2")

		DASH_MULTIPLIER = 15
		DASH_DURATION = .15
		
		self.dashing = true
		self.velocity.x = SPEED * DASH_MULTIPLIER * self.direction
		self.last_dash = now
	end
end

local function jump(self)
	self.velocity.y = JUMP
	self.on_ground = false
	
	sound.play("#jump")
end

local function attack(self)
	local now = socket.gettime()
	
	if now > (self.last_attack + ATTACK_COOLDOWN) then
		sound.play("#attack")

		self.last_attack = now
	end
end

local function animate(self)
	local anim = hash("idle")
	
	if self.velocity.x ~= 0 then
		anim = hash("walk")
	end

	if not self.on_ground then
		anim = hash("jump")
	elseif self.duck then
		anim = hash("duck")
	end

	if anim ~= self.current_anim then
		sprite.play_flipbook("#sprite", anim)
		self.current_anim = anim
	end
end

local function clamp(v, min, max)
	if v < min then return min
	elseif v > max then return max
	else return v end
end

function update(self, dt)
	local p = go.get_position()

	go.set_position(p + self.velocity * dt)
	animate(self)

	if self.dashing then
		DASH_DURATION = DASH_DURATION - dt

		if DASH_DURATION <= 0 then
			self.dashing = false
			DASH_MULTIPLIER = 1
		end
	else
		self.velocity.x = 0 
	end
end

function fixed_update(self, dt)
	-- gravity
	if self.on_ground then
		self.velocity.y = 0
	else
		self.velocity.y = self.velocity.y - GRAVITY * dt
	end
	
	self.velocity.y = clamp(self.velocity.y, -2000, 2000)
end

function on_input(self, action_id, action)
	if action_id == hash("duck") and action.pressed then
		self.duck = true
	elseif action_id == hash("duck") and action.released then
		self.duck = false
	end

	if action_id == hash("jump") and action.pressed and self.on_ground then
		jump(self)
	elseif action_id == hash("left") then
		self.direction = DIRECTION_LEFT
		move(self)
		flip(self.direction)
	elseif action_id == hash("right") then
		self.direction = DIRECTION_RIGHT
		move(self)
		flip(self.direction)
	end

	if action_id == hash("dash") and action.pressed then
		dash(self)
	end

	if action_id == hash("attack") and action.pressed then
		attack(self)
	end
end

function on_message(self, message_id, message, sender)
	if (message_id == hash("contact_point_response") and message.other_group == hash("floor")) then
		self.on_ground = true
		self.velocity.y = 0
		-- msg.post("player#duckcollision", "disable")
	end
end

function on_reload(self)
	-- Add reload-handling code here
	-- Learn more: https://defold.com/manuals/hot-reload/
	-- Remove this function if not needed
end

function final(self)
	-- play some death music and print game over screen?
end